class BenchmarkDashboard {
    constructor() {
        this.dataLoader = new BenchmarkDataLoader();
        this.charts = new BenchmarkCharts();
        this.data = null;
        this.iopsChart = null;
        this.latencyChart = null;
        
        this.init();
    }

    async init() {
        console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dashboard...');
        
        try {
            this.data = await this.dataLoader.loadAllData();
            this.createCharts();
            this.createFilters();
            this.updateDataInfo();
            
            console.log('‚úÖ Dashboard –≥–æ—Ç–æ–≤!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    }

    createCharts() {
        const iopsContainer = d3.select('#iops-chart .chart-content');
        const latencyContainer = d3.select('#latency-chart .chart-content');
        
        this.iopsChart = this.charts.createIOPSChart(iopsContainer, this.data.allData);
        this.latencyChart = this.charts.createLatencyChart(latencyContainer, this.data.allData);
    }

    createFilters() {
        // –ó–∞–≥–ª—É—à–∫–∞ - —Ñ–∏–ª—å—Ç—Ä—ã –¥–æ–±–∞–≤–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        console.log('–§–∏–ª—å—Ç—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }

    updateDataInfo() {
        const lastUpdate = this.data.allData.length > 0 ? 
            this.data.allData[this.data.allData.length - 1].date.toLocaleDateString('ru-RU') : 
            '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        
        d3.select('#last-update').text(`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdate}`);
    }

    showError(message) {
        const containers = d3.selectAll('.chart-content');
        containers.html(`<div style="color: #e74c3c; text-align: center; padding: 50px;">${message}</div>`);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new BenchmarkDashboard();
});